package restAssured;

import io.restassured.RestAssured;
import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

import io.restassured.response.Response;
import org.testng.annotations.Test;

/**
 * Authentication:It is a process to validate user with server through specific properties
 * i.e. credentials and allow to let into the application.
 *
 * Authorization:It is a process which allows user to access specific server or api based on allowed quota.
 * It is mandatory to perform authentication before authorization.
 *
 * There are multiple types of authorization schemes :
 * 1.Basic Auth:In this we send username and password in the form of header insider request as Base64 format that makes more secured
 * 2.API key
 * 3.Bearer Token :Bearer authentication is an http authentication scheme that involves security tokens called as bearer token
 * The bearer token is generated by server in response to login request.This to send by request in terms of authorization header
 *
 * Auth 2.0 :It is a authorization scheme in which we authorize third party to access service on the behalf of consuming any other service
 * of other party
 */
public class SerializationAndDeserialization {
    @Test
    public void basicAuth()
    {
        RestAssured.baseURI="https://httpbin.org/";

        given()
                .log().all()
                .auth()
                .basic("admin", "admin")
                .when()
                .get("basic-auth/admin/admin")
                .then().log().all()
                .assertThat()
                .statusCode(200)
                .body("authenticated", equalTo(true))
                .body("user", equalTo("admin"));
    }
    @Test
    public void apiKey()
    {
        RestAssured.baseURI = "https://api.getpostman.com";
        Response res = given()
                .header("x-api-key", "PMAK-6776b438a7002e0001526064-4ce9460b5b05d41368910bf42afa72bd8f")
                .when()
                .get("/workspaces")
                .then()
                .extract()
                .response();
        System.out.println("response is :" + res.asPrettyString());
        System.out.println("Status code is :" + res.statusCode());
    }
    @Test
    public void bearerToken()
    {
        // ref :https://docs.github.com/en/rest/users/users?apiVersion=2022-11-28#get-the-authenticated-user
        RestAssured.baseURI = "https://api.github.com";
        given()
                .header("Accept","application/vnd.github+json")
                .header("X-GitHub-Api-Version","2022-11-28")
                .header("Authorization","Bearer PersonalAccessToken")
                .log().all()
                .when()
                .get("/user/repos")
                .then().log().all();
    }
    /**
     * Auth 2.0 :It is a authorization scheme in which we authorize third party to access service on
     *    the behalf of consuming any other service of other party
     *
     * Process of Authorization:
     * 1.User goes to spotify application and try to sign up with google
     *   then user will choose google as a authenticator factor.
     * 2.spotify will redirect to user to Google.com with scope that requires for Authorization server
     * 3.User logged into google account and review the permission after successful login and user
     *   grant access to the google for sharing information.
     * 4.Authorization server send the Auth code to the client app and here the Auth Code is a short live token that
     *   can be used by client app
     *   4.a :Client will share the 'Auth Code' with Authorization server and request for 'Refresh token'(linked with
     *        Google account to generate 'Access Token'(linked with client short live token)
     * 5.Refresh Token will now send to client app to generate Access token
     * 6.With the help of Access token client app will have the access to data of user
     *
     */
}
